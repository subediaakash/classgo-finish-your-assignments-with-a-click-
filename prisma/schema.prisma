generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  name          String
  email         String
  dateOfBirth   DateTime?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Addiction     Addiction[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Addiction {
  id                   String        @id @default(uuid())
  userId               String
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  type                 ADDICTIONTYPE
  expectedStartDate    DateTime?
  addictionDescription String
  Detox                Detox[]
}

model Detox {
  id          String      @id @default(uuid())
  addictionId String
  addiction   Addiction   @relation(fields: [addictionId], references: [id], onDelete: Cascade)
  startDate   DateTime
  endDate     DateTime?
  status      DETOXSTATUS
  createdAt   DateTime
  updatedAt   DateTime
  Solution    Plans[]
  streak      Int         @default(0)

  @@map("detox")
}

model Plans {
  id        String   @id @default(uuid())
  detoxId   String
  detox     Detox    @relation(fields: [detoxId], references: [id], onDelete: Cascade)
  week      Int
  day       Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum DETOXSTATUS {
  ONGOING
  COMPLETED
  FAILED
}

enum ADDICTIONTYPE {
  ALCOHOL
  TOBACCO
  GAMBLING
  DRUGS
  FOOD
  PORNOGRAPHY
  SOCIAL_MEDIA
  OTHER
}
